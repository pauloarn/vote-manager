nt:
  application:
    context: ${CONTEXT_PATH:/nt}
    name: nt-vote-manager
  port: ${PORT:8080}
  log:
    level: DEBUG
  database:
    name: ${DB_NAME:NTDataBase}
    schema: ${DB_SCHEMA:vote_manager}
    username: ${DB_CONNECTION_USER_NAME:admin}
    password: ${DB_CONNECTION_PASSWORD:admin}
    host: ${BD_CONNECTION_HOST:localhost}
    ddlAuto: validate
    port: 5432
    showSql: false
    enableFlyway: ${RUN_FLYWAY:false}
  rabbitmq:
    host: ${ACTIVE_MQ_HOST:localhost}
    port: 5672
    username: ${ACTIVE_MQ_USERNAME:admin}
    password: ${ACTIVE_MQ_PASSWORD:admin123}
    queue:
      producer:
        notify-agenda: notify-agenda-result
  scheduler:
    cron:
      notify-agenda: * * * * *


spring:
  output:
    ansi:
      enabled: detect
  application:
    name: ${nt.application.name}
  jackson:
    serialization:
      write-dates-as-timestamps: true
  datasource:
    url: jdbc:postgresql://${nt.database.host}:${nt.database.port}/${nt.database.name}
    username: ${nt.database.username}
    password: ${nt.database.password}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
      order_by:
        default_null_ordering: last
    hibernate:
      ddl-auto: ${nt.database.ddlAuto}
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: ${nt.database.showSql}
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    enabled: ${nt.database.enableFlyway}
    schemas: ${nt.database.schema}
    locations: filesystem:src/main/resources/scripts/migrations
    user: ${nt.database.username}
    password: ${nt.database.password}
  web:
    locale: pt_BR
    resources:
      add-mappings: false
  rabbitmq:
    host: ${nt.rabbitmq.host}
    port: ${nt.rabbitmq.port}
    username: ${nt.rabbitmq.username}
    password: ${nt.rabbitmq.password}
  mvc:
    format:
      date: dd/MM/yyyy
  servlet:
    multipart:
      enabled: false

server:
  port: ${nt.port}
  servlet:
    context-path: ${nt.application.context}


logging:
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(%-40.40logger{39}){cyan} %clr(:){faint} %clr([${nt.application.name}]){magenta}%clr(%X{cdTransacao}){yellow}%clr(%X{contexto}){blue} %clr(%m%n){%5p} ${LOG_EXCEPTION_CONVERSION_WORD:%wEx}'
    file: '%d{yyyy-MM-dd HH:mm:ss.SSS} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %clr([${nt.application.name}]){magenta}%clr(%X{contexto}){magenta}%clr(%X{cdTransacao}){magenta} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}'
  level:
    com.nt: ${nt.log.level}
    root: INFO
